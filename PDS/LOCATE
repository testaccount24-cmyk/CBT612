***********************************************************************
*
*        LOCATE IS A TSO COMMAND PROCESSOR USED TO LOCATE A NAMED
*        COMMAND IN EITHER THE F/MLPA, LPA, TASKLIB, LINK LIST,
*        SYSEXEC AND SYSPROC.
*        RELEVANT INFORMATION AND LOCATION IS DISPLAYED TO THE USER.
*        SEARCH SEQUENCE IN ISPF
*               - JPA (JOB PACK AREA)
*               - LIBDEF ISPLLIB
*               - ISPLLIB
*               - TASKLIB         IE. TSOLIB ACT DA(XXXX)
*               - STEPLIB
*               - F/MLPA
*               - PLPA              LPALST DSNAME
*               - DYNAMIC LINKLIST
*               - NUCLEUS
*               - USER SYSUEXEC/SYSUPROC
*               - APPLICATION EXEC/CLIST
*               - SYSEXEC/SYSPROC
*
*        SEARCH SEQUENCE IN NATIVE TSO MODE
*               - JPA (JOB PACK AREA)
*               - TASKLIB           IE. TSOLIB ACT DA(XXXX)
*               - STEPLIB
*               - F/MLPA
*               - PLPA              LPALST DSNAME
*               - DYNAMIC LINKLIST
*               - NUCLEUS
*               - USER SYSUEXEC/SYSUPROC
*               - APPLICATION EXEC/CLIST
*               - SYSEXEC/SYSPROC
*
*   NOTE: 1) IT SUPPORT APPLICATION LEVEL STACKED EXEC AND CLIST
*            WITH BEST EFFORT
*         2) IT DOES NOT SEARCH STACKED ISPLLIB
*         3) IF SYSEXEC IS DEACTIVATED, FINDCMD CANNOT FUNCTION
*            PROPERLY AS CONTROL BLOCK ALTLIB TABLE DOES NOT
*            EXIST
*
*   REGISTER USAGE
*         R5    -  NOT IN USE
*         R6    -  NOT IN USE
*         R8    -  NOT IN USE
*         R10   -  UPT
*         R11   -  ECT
*         R12   -  PROGRAM BASE REGISTER
*   MACROS
*         BLDL     - BUILD DIRECTORY LIST
*         CLOSE    - CLOSE FILE
*         CSVQUERY - CONTENT SUPERVISOR QUERY SERVICE
*         CSVDYNL  - DYNAMIC LINKLIST SERVICE
*         EXTRACT  - EXTRACT TIOT
*         LINK     - LINK
*         NUCLKUP  - NUCLEUS MAP LOOKUP SERVICE
*         OPEN     - OPEN FILE
*         PUTLINE  - TSO DISPLAY SERVICE
*         SWAREQ   - SWA MANAGER
*
*
*   ENHANCEMENT:
*        IF THE LOAD MODULE IS FOUND ON THE LINKLIST, THE DSN IS ALSO
*        DISPLAYED                        ALBERT CHENG 14 SEP 1990
*        SEARCH NUCLEUS MAP IF THE MODULE DOES NOT EXIST AT LINKLIST
*        OR LPA. FIX THE BUG OF DISPLAYING F/MLPA.
*                                         ALBERT CHENG 02 NOV 1990
*
*        DISPLAY THE LOAD ADDRESS AND IN-USE COUNT IF THE LOAD MODULE
*        IS FOUND AT JPA.
*                                         ALBERT CHENG 30 JUN 1992
*  @01   SUPPORT OS/390 DYNAMIC LNKLST. MACRO CSVDYNL REQUIRES TO
*        SAVE AT APF LIBRARIES. IT EXECUTES MODESET MACRO HECNE IT
*        MUST LINK-EDIT WITH AUTH=1 AND REGISTER LOCATE COMMAND
*        AT PARMLIB MEMBER IKJTSO00.
*
*        AUTHCMD NAMES(          /* AUTHORIZED COMMANDS     */   +
*                       LOCATE   /* IN-HOUSE UTILITY LOCATE */   +
*                              )
*                                         ALBERT CHENG 03 NOV 2000
*
*
*  @02   REPLACE TPUT WITH PUTLINE AND THE LOCATE
*        COMMAND CAN INVOKE AT BATCH MODE           AC 18 DEC 2009
*
*  @03   TURN OFF HIGH ORDER BIT OF NUCLEUS MODULE
*        DISPLAY THE LENGTH OF THE NUCLUES MODULE   AC 20 AUG 2013
*
*  @04   GET RID OF MACRO $PROLOG AND $EPILOG
*                                         ALBERT CHENG 25 SEP 2014
*  @05   A) IF THE MODULE IS IN LPA. CALL REXX ALOCLPA TO
*           ALLOCATE LPALIB, THEN DISPLAY THE SOURCE LPA DSNAME.
*        B) CALL REXX CHKMEM TO VERIFY WHETHER THE MEMBER EXIST IN
*           STEPLIB. IF THE MODULE EXISTS IN STEPLIB, DISPLAY THE
*           STEPLIB DSNAME, OTHERWISR DISPLAY THE ISPLLIB DSNAME.
*                                         ALBERT CHENG 21 OCT 2014
*
*  @06   DEFINE RACF FACILITY PROFILE CSVDYNL.*.TEST
*        CLASS      NAME
*        -----      ----
*        FACILITY   CSVDYNL.*.TEST (G)
*
*        RDEF FACILITY CSVDYNL.*.TEST UACC(READ)
*        SETROPTS RACLIST(FACILITY) REFRESH
*
*        LOCATE IS NO NEED TO DEFINE AS AUTHORISED COMMAND IN
*        IKJTSO00. YOU MUST HAVE READ ACCESS RIGHT OF THE ABOVE
*        RACF PROFILE. LINK-EDIT LOCATE WITH AC=0.
*                                         ALBERT CHENG 12 NOV 2014
*
*  @07   IF THE MODULE RESIDES IN LIBDEF ISPLLIB LIBRARIES,
*        DISPLAY THE DSNAME OF LIBDEF ISPLLIB.
*                                         ALBERT CHENG 10 DEC 2014
*
*  @08   A) IF THE COMMAND ARE NOT FOUND IN LOAD LIBRARIES, SEARCH
*           USER LEVEL SYSEXEC, USER LEVEL SYSPROC,
*           APPLICATION LEVEL SYSUEXEC AND SYSUPROC,
*           SYSEXEC AND SYSPROC.
*        B) CALL SUB PROGRAM LPALIB TO LOCATE LPA MODULE FROM
*           LPA LIBRARIES.
*        C) REMOVE THE REFERENCE OF REXX ALOCLPA AND CHKMEM
*        D) ADD ALIAS FINDCMD TO SEARCH EXEC AND CLIST LIBRARIES
*           ONLY.
*        E) ADD ALIAS FINDPRG TO SEARCH TASKLIB/LPA/LINKLST LIBARIES
*           ONLY.
*        F) USE CSVQUERY TO LOCATE MODULE IN LINK PACK AREA
*                                         ALBERT CHENG 05 JAN 2015
***********************************************************************
         PUNCH ' ALIAS FINDCMD'                                    @08A 00003
         PUNCH ' ALIAS FINDPRG'                                    @08A 00003
LOCATE   CSECT                                                     @05A
         BAKR  R14,0             SAVE REGISTERS INTO LINKAGE STACK @04C
         J     START                  BRANCH AROUND MODULE         @07A
         DC    C'LOCATE.V08'           DESCRIPTION AND VERSION NO. @08C
         DC    C'&SYSDATE &SYSTIME'   ASSEMBLE DATE AND TIME       @07A
START    DS    0H                                                  @08C
         LR    R12,R15                                             @04A
         USING LOCATE,R12             ESTABLISH PROGRAM BASE REG   @04A
         MVC   CMDUPT,CPPLUPT-CPPL(R1)  COPY UPT ADDRESS
         MVC   CMDECT,CPPLECT-CPPL(R1)  COPY ECT ADDRESS
         L     R10,CPPLUPT-CPPL(,R1)                               @02A
         L     R11,CPPLECT-CPPL(,R1)                               @02A
         MVC   CMDCBUF,CPPLCBUF-CPPL(R1) COPY ADDRESS OF COMMAND BUF
         LA    R1,CMDUPT                 PROVIDE LIST FOR PARSE
         LINK  EP=IKJPARS                PARSE COMMAND
         L     R2,CMDANSR                GET POINTER TO ANSWER AREA
         L     R1,IKJOPT-IKJPARMD(,R2)   GET POINTER TO OPERAND
         LH    R2,IKJOPT+4-IKJPARMD(,R2) GET SIZE OF OPERAND
         BCTR  R2,R0                  DECREMENT R2 FOR EXECUTE MOVE
         EX    R2,MOVENAME            MOVE TO LIST FOR LOAD
         MVC   BLDLNAME(8),NAME       MOVE NAME TO BLDL LIST
         MVC   MSG4NAME(8),NAME       MOVE NAME TO MSG2
         EXTRACT TIOTADR,FIELDS=(TIOT) EXTRACT THE ADDRESS OF TIOT @05A
         CLC   CFINDCMD,ECTPCMD-ECT(R11)                           @08A
         JE    FINDCMD                                             @08A
         L     R3,PSATOLD-PSA(,0)      CURRENT TCB X'21C'
         L     R3,TCBJSTCB-TCB(,R3)    LOAD JSTCB
*----------------------------------------------------------------
* LOCATE THE MODULE IN JPA
*----------------------------------------------------------------
TCBLOOP  SR    R15,R15                 CLEAR FOR ICM INSTRUCTION
         ICM   R15,7,TCBJPQB-TCB(R3)   LOAD JOB PACK QUEUE
         JZ    NEXTTCB                 NO, SEARCH THE MLPA/FLPA
         J     FIRSTJPA
NEXTJPA  ICM   R15,15,CDCHAIN-CDENTRY(R15) 1ST CDE ON THE QUEUE
         JZ    NEXTTCB                     NO, SEARCH THE MLPA/FLPA
FIRSTJPA CLC   NAME,CDNAME-CDENTRY(R15)    NAMES EQUAL?
         JNE   NEXTJPA                     BRANCH IF NOT FOUND
         XC    PRETCODE,PRETCODE           INDICATE MODULE FOUND
         TM    CDATTR-CDENTRY(R15),CDMIN   MINOR CDE?
         JZ    CDEMAJ1                     NO, CONTINUE
         MVC   JPATRUE,CDNAME-CDENTRY(R15) COPY TRUE NAME
         L     R15,CDXLMJP-CDENTRY(,R15)   LOCATE MAJOR CDE
CDEMAJ1  DS    0H
         MVC   JPANAME,CDNAME-CDENTRY(R15) COPY MODULE NAME
         UNPK  JPAADR(9),CDENTPT-CDENTRY(5,R15)  UNPACK FOR PRINT
         TR    JPAADR(8),TRTABLE-240  MAKE PRINTABLE
         MVI   JPAADR+8,C' '          CLEAR GARBAGE FROM UNPACK
         UNPK  JPAUSE(5),CDUSE-CDENTRY(3,R15)   UNPACK FOR PRINT
         TR    JPAUSE(4),TRTABLE-240  MAKE PRINTABLE
         MVI   JPAUSE+5,C' '          CLEAR GARBAGE FROM UNPACK
         CLI   JPATRUE,C' '           ALIAS NAME EXIST ??
         JNE   CDEMIN1                BRANCH IF YES
         MVC   TEXT(LMSG1),MSG1       DISPLAY MAJOR NAME           @02C
         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
         J     TASKLIB                SCAN TASKLIB                 @08C
CDEMIN1  MVC   TEXT(LMSG1A),MSG1      DISPLAY MAJOR AND MINOR NAME @02C
         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
NEXTTCB  ICM   R3,15,TCBNTC-TCB(R3)
         JNZ   TCBLOOP
*----------------------------------------------------------------
* LOCATE THE MODULE IN ISPLLIB, TASKLIB AND STEPLIB
* 1) IF ISPF IS ACTIVE
*    A) SEARCH TOS TO GET ISPLLIB LIBDEF DSNAME
*    B) SEARCH ISPLLIB
* 2) SEARCH TSOLIB TABLE TO GET THE TASKLIB DDNAME
* 3) SEARCH STEPLIB
*----------------------------------------------------------------
TASKLIB  BLDL  0,LIST            LOCATE MODULE IN ISPLLIB/STEPLIB
         LTR   R15,R15                        CHECK RETURN CODE
         JNZ   LPAQ                           BRANCH IF NOT FOUND  @08C
         TM    BLDLC,X'80'                    IS THIS AN ALIAS?    @08C
         JZ    NOTALIAS                       NO, MAJOR NAME
         MVC   MODTYPE(L'CMINOR),CMINOR       INDICATE MODULE TYPE
NOTALIAS CLI   BLDLZ,X'01'                    LINKLIST LIBRARY?
         JE    LPAQ                    BRANCH IF IN DYNAMIC LINK LIB
ISPFCHK  DS    0H                                                  @05C
         MVC   LIBTYPE(L'CJOBSTEP),CJOBSTEP   MODIFY MESSAGE TEXT
         L     R15,VISPQRY             TEST FOR                    @05A
         BALR  R14,R15                   ISPF ENVIRONMENT          @05A
         LTR   R15,R15                     IS ACTIVE               @05A
         JZ    ISPMAIN                 BRANCH IF ISPF IS ACTIVE    @08C
         MVI   CISPLLIB,X'FF'          MARK ISPLLIB INACTIVE       @08C
         J     TSKLIBDD                BRANCH IF ISPF IS ACTIVE    @08C
ISPMAIN  L     R1,PSATOLD-PSA(,0)      CURRENT TCB X'21C'          @07A
         L     R1,TCBOTC-TCB(,R1)      GET MOTHER TCB              @08A
         L     R15,TCBGRS9-TCB(,R1)    TCB R9 --> TLD              @07A
         CLC   CTLD,0(R15)             CHECK TLD ACRONYM           @08A
         JE    ISPLLIB                 BRANCH IF IT IS TLD         @08A
         MVC   LIBTYPE(L'CTASKLIB),CTASKLIB                        @08A
         J     DISPLAY                 ???                         @08A
ISPLLIB  L     R15,X'7C'(,R15)         APPLICATION DATA            @07A
         ICM   R15,15,X'48'(R15)       ISPLLIB TOS                 @08C
         JZ    TSKLIBDD                BRANCH IF NO LIBDEF ISPLLIB @08A
         CLC   CTOS,0(R15)             CHECK TOS ACRONYM           @08A
         JNE   TSKLIBDD                BRANCH IF NOT MATCH         @08A
         MVC   CLIBDEF(8),X'BC'(R15)   GET ISPLLIB LIBDEF DDNAME   @08A
TSKLIBDD L     R1,PSAAOLD-PSA(,R0)     HOME ASCB X'224'            @08A
         L     R1,ASCBASXB-ASCB(,R1)   ASXB  X'6C'                 @08A
         SAM31                         SWITCH TO 31 BIT ADDRESSING @08A
         L     R9,ASXBLWA-ASXB(,R1)    LWA   X'14'                 @08A
         ICM   R1,15,LWADYSEG-LWA(R9)  LWADYSEG IKJDYSEG X'26C'    @08A
         JZ    SRCTKLIB                BRANCH IF ZERO              @08A
         ICM   R1,15,24(R1)            TSOLIB DDN TABLE            @08A
         JZ    SRCTKLIB                BRANCH IF ZERO              @08A
         MVC   CTASKDDN(8),20(R1)      GET TASKLIB DDNAME          @08A
SRCTKLIB LA    R3,CLIBDEF              LOCATE FIRST TABLE ENTRY    @08A
         BRAS  R7,GRPSRCH              LOCATE MEMBER               @08A
*----------------------------------------------------------------
* LOCATE THE MODULE IN F/M/PLPA
*----------------------------------------------------------------
LPAQ     CSVQUERY INEPNAME=BLDLNAME,                                   X
               SEARCH=LPA,                                             X
               OUTATTR3=CSVATTR3,                                      X
               OUTLENGTH=CSVMLEN,                                      X
               OUTEPA=CSVEPA,                                          X
               OUTEPNM=NAME,                                           X
               OUTMJNM=TRUENM
         LTR   R15,R15                     BRANCH IF THE MODULE    @08A
         JNZ   DYNAMIC                      DOES NOT EXIST IN LPA  @08A
LPTRUE   UNPK  LENGTH(7),CSVMLEN+1(4)      UNPACK LENGTH FOR PRINT @08C
         TR    LENGTH(6),TRTABLE-240       MAKE PRINTABLE
         MVI   LENGTH+6,C' '               CLEAR GARBAGE FROM UNPACK
         UNPK  ADDRESS(9),CSVEPA(5)        UNPACK ADDRESS FOR PRINT@08C
         TR    ADDRESS(8),TRTABLE-240      MAKE PRINTABLE
         MVI   ADDRESS+8,C' '              CLEAR GARBAGE FROM UNPACK
         TM    CSVATTR3,X'20'              PLPA ?                  @08A
         JO    LPAMSG                                              @08A
         MVI   LPATYPE,C'M'                                        @08A
         TM    CSVATTR3,X'10'              MLPA ?                  @08A
         JO    LPAMSG                                              @08A
         MVI   LPATYPE,C'F'                                        @08A
         TM    CSVATTR3,X'08'              FLPA ?                  @08A
         JO    LPAMSG                                              @08A
         MVC   LPATYPE(4),CCSA                                     @08A
         TM    CSVATTR3,X'04'              CSA ?                   @08A
         JO    LPAMSG                                              @08A
         MVC   LPATYPE(4),UNKNOWN      SET TO UNKNOWN TYPE         @08A
LPAMSG   CLC   NAME,TRUENM             IS THIS AN ALIAS?           @08C
         JNE   TALIAS                  YES, ISSUE ALIAS TPUT
         MVC   TEXT(LMSG5),MSG5        MESSAGE WITHOUT ALIAS NAME  @02C
         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
         J     GETLPADS                                            @05A
TALIAS   MVC   TEXT(LMSG5A),MSG5       MESSAGE WITH ALIAS NAME     @02C
         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
GETLPADS DS    0H                                                  @05A
         XC    PRETCODE,PRETCODE       INDICATE MODULE FOUND       @08A
         LA    R1,BLDLNAME                                         @08A
         LA    R2,LPADSN                                           @08A
         L     R15,VLPALIB             CALL SUBPROGRAM LPALIB TO   @08A
         BALR  R14,R15                 EXTRACT LPA DSNAME          @08A
         LTR   R15,R15                 RC = 0 ?                    @05A
         JNZ   DYNAMIC                 BRANCH IF RC IS NON ZERO    @05C
         MVC   TEXT(LMSG6A),MSG6       DISPLAY LPA DSNAME          @05A
         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
*----------------------------------------------------------------
* LOCATE THE MODULE IN DYNAMIC LINKLIST
*----------------------------------------------------------------
DYNAMIC  DS    0H                     HANDLE DYNAMIC LINKLIST      @01A
         CSVDYNL REQUEST=TEST,LNKLSTNAME=LSTNAME,                      X
               FOUNDDSNAME=DSN,MODNAME=BLDLNAME
         LTR   R15,R15
         JNZ   NUCLEUS
         MVC   LIBTYPE(L'CDYNLNK),CDYNLNK     MODIFY MESSAGE TEXT  @01A
         JZ    DISPLAY
*----------------------------------------------------------------
* LOCATE THE MODULE IN NUCLEUS
*----------------------------------------------------------------
NUCLEUS  DS    0H
         LA    R1,BLDLNAME             POINT TO MODULE/COMMAND NAME
         NUCLKUP NAME=(1),ADDR=(3)     INVOKE NUCLEUS MAP LOOKUP SRV
         LTR   R15,R15                 RC = 0 ?
         JNZ   FINDCMD                 BRANCH IF NOT FND IN NUCLEUS@08C
         NILH  R3,X'7FFF'              TURN OFF HIGH ORDER BIT     @03A
         ST    R3,DBLWD
         UNPK  NADDRESS(9),DBLWD(5)    UNPACK ADDRESS FOR PRINT
         TR    NADDRESS(8),TRTABLE-240 MAKE PRINTABLE
         MVI   NADDRESS+8,C' '         CLEAR GARBAGE FROM UNPACK
         ST    R1,DBLWD                                            @03A
         UNPK  NLEN(9),DBLWD(5)        UNPACK ADDRESS FOR PRINT    @03A
         TR    NLEN(8),TRTABLE-240     MAKE PRINTABLE              @03A
         MVI   NLEN+8,C' '             CLEAR GARBAGE FROM UNPACK   @03A
         MVC   MSG3NAME,BLDLNAME       COPY MODULE/COMMAND
         MVC   TEXT(LMSG9),MSG9            DISPLAY NUCLUES MODULE  @02C
         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
         J     RETURN
*----------------------------------------------------------------- @08A
* LOCATE A COMMAND FROM SYSEXEC AND SYSPROC                        @08A
*----------------------------------------------------------------- @08A
FINDCMD  DS    0H                                                  @08A
         CLC   CFINDPRG,ECTPCMD-ECT(R11)  FINDPRG COMMAND ?        @08A
         JE    EXIT                    BRANCH IF YES               @08A
         SAM31                         SWITCH TO 31 BIT ADDRESSING @08A
         L     R15,ECTEXTPR-ECT(,R11)  ECT EXTENSION BLOCK X'34'   @08A
         ICM   R3,15,36(R15)           ALTLIB TABLE X'24'          @08A
         JZ    SYSEXEC                 BRANCH IF NO ALTLIB         @08A
*        JZ    DEBUG1               BRANCH NO APPL EXEC/CLIST      @08A
*----------------------------------------------------------------- @08A
* VERIFY WHETHER SYSUEXEC AND SYSUPROC IF ACTIVE OR NOT            @08A
* R3 = ANCHOR OF ALTLIB TABLE                                      @08A
*----------------------------------------------------------------- @08A
         TM    24(R3),X'80'          SYSUEXEC                      @08A
         JNO   CHKUPROC              BRANCH IF NOT SYSUEXEC        @08A
         MVC   CUEXEC(8),CUEXEC+8    ENABLE SYSUEXEC SEARCHING     @08A
CHKUPROC TM    24(R3),X'40'          SYSUPROC                      @08A
         JNO   ALTLIB                BRANCH IF NOT SYSUEXEC        @08A
         MVC   CUPROC(8),CUPROC+8    ENABLE SYSUPROC SEARCHING     @08A
*----------------------------------------------------------------- @08A
* GET APPLICATION LEVEL CLIST FROM ALTLIB TABLE                    @08A
* NOTE : THE NUMBER OF APPLICATION LEVEL CLIST MAY BE MORE THAN    @08A
*        TWO AND LOCATE ONLY SEARCH THE FIRST 2 CLIST DDNAME       @08A
*----------------------------------------------------------------- @08A
ALTLIB   CLI   31(R3),X'01'                                        @08A
         JE    APLSPROC             BRANCH IF ONLY 1 CLIST         @08A
         CLI   31(R3),X'00'                                        @08A
         JE    APLEXEC              BRANCH IF NO CLIST             @08A
         SR    R2,R2                                               @08A
         IC    R2,31(R3)            LOAD NO. OF APPL LEVEL CLIST   @08A
         BCTR  R2,0                 MINUS 1                        @08A
         SLA   R2,3                 R2 = R2 * 8                    @08A
         LA    R1,0(R2,R3)                                         @08A
         MVC   CAPLPROC(8),128(R1)  ENABLE SEARCH APPL CLIST       @08A
         MVC   CAPLPROS(8),120(R1)  ENABLE SEARCH APPL CLIST STACK @08A
         J     APLEXEC                                             @08A
APLSPROC MVC   CAPLPROC(8),128(R3)   ENABLE SEARCH APPL CLIST      @08A
*----------------------------------------------------------------- @08A
* GET APPLICATION LEVEL EXEC FROM ALTLIB TABLE                     @08A
* NOTE : THE NUMBER OF APPLICATION LEVEL EXEC MAY BE MORE THAN     @08A
*        TWO AND LOCATE ONLY SEARCH THE FIRST 2 EXEC DDNAME        @08A
*----------------------------------------------------------------- @08A
APLEXEC  CLI   29(R3),X'00'                                        @08A
         JE    ASYSEXEC             BRANCH IF NO APPL LEVEL EXEC   @08A
         CLI   29(R3),X'01'                                        @08A
         JE    APLEXES              BRANCH IF ONLY 1 APPL LEVEL EXE@08A
         SR    R2,R2                                               @08A
         IC    R2,29(R3)            LOAD NO. OF APPL LEVEL EXEC    @08A
         BCTR  R2,0                 MINUS 1                        @08A
         SLA   R2,3                 R2 = R2 * 8                    @08A
         LA    R1,0(R2,R3)                                         @08A
         MVC   CAPLEXEC(8),32(R1)   ENABLE SEARCH APPL EXEC        @08A
         MVC   CAPLEXES(8),24(R3)   ENABLE SEARCH APPL EXEC STACK  @08A
         J     ASYSEXEC                                            @08A
APLEXES  MVC   CAPLEXEC(8),32(R3)        ENABLE SEARCH APPL EXEC   @08A
ASYSEXEC TM    24(R3),X'20'              SEARCHDD(NO)              @08A
         JO    ASYSPROC                  BRANCH IF YES             @08A
         MVC   CSYSEXEC(8),CSYSEXEC+8    ENABLE SEARCH SYSEXEC     @08A
ASYSPROC TM    24(R3),X'08'              SYSPROC                   @08A
         JNO   SRCHPROC                  BRANCH IF DISABLE         @08A
         MVC   CSYSPROC(8),CSYSPROC+8    ENABLE SEARCH SYSPROC     @08A
         J     SRCHPROC                  BRANCH IF SEARCHDD = NO   @08A
*DEBUG1  TPUT  EMSG7,L'EMSG7                                       @08A
SYSEXEC  ICM   R15,15,ECTENVBK-ECT(R11)  REXX ENVIRONMENT BLOCK    @08A
         JZ    SYSPROC                   BRANCH IF NO IRXENVB      @08A
         L     R15,52(,R11)              ECTEXT                    @08A
         TM    60(R15),X'80'                                       @08A
         JNZ   SYSPROC                   BRANCH IF SEARCHDD(NO)    @08A
         MVC   CSYSEXEC(8),CSYSEXEC+8    ENABLE SEARCH SYSEXEC     @08A
SYSPROC  MVC   CSYSPROC(8),CSYSPROC+8    ENABLE SEARCH SYSPROC     @08A
*        TPUT  CAPLPROC,80
*----------------------------------------------------------------- @08A
* SEARCH MEMBER IN THE FOLLOWING SEQUENCE                          @08A
*      1 USER LEVEL EXEC           SYSUEXEC                        @08A
*      2 USER LEVEL CLIST          SYSUPROC                        @08A
*      3 APPLICATION LEVEL EXEC                                    @08A
*      4 STACK APPLICATION LEVEL EXEC                              @08A
*      5 APPLICATION LEVEL CLIST                                   @08A
*      6 STACK APPLICATION LEVEL CLIST                             @08A
*      7 SYSTEM LEVEL EXEC         SYSEXEC                         @08A
*      8 SYSTEM LEVEL CLIST        SYSPROC                         @08A
*----------------------------------------------------------------- @08A
SRCHPROC LA    R3,CUEXEC               GET FIRST TABLE ENTRY       @08A
         BRAS  R7,GRPSRCH              LOCATE MEMBER               @08A
DISPLAY  CLI   LIBTYPE,C' '            NOT FIND IN LOAD LIBRARIES  @08A
         JE    EXIT                    BRANCH IF YES               @08A
         MVC   TEXT(LMSG4),MSG4        DISPLAY MSG4                @02A
         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
         XC    PRETCODE,PRETCODE       INDICATE MODULE FOUND       @05A
EXIT     OC    PRETCODE,PRETCODE   ANY MESSAGE ISSUED (MODULE FOUND)
         JZ    RETURN                  YES, ALL DONE
         MVC   TEXT(LMSG8),MSG8        DISPLAY MSG8                @08A
         CLC   CFINDCMD,ECTPCMD-ECT(R11)  COMMAND IS FINDCMD ?     @08A
         JE    NOTFNDMG                BRANCH IF YES               @08A
         MVC   TEXT(LMSG0),MSG0        DISPLAY MSG0                @02C
NOTFNDMG PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X
               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A
RETURN   IKJRLSA CMDANSR               RELEASE PARSE STORAGE
         L     R15,PRETCODE            SET RETURN CODE
         PR                            RETURN TO TSO               @04C
*----------------------------------------------------------------- @08A
* LOCATE MEMBER FROM DDNAME TABLE                                  @08A
*----------------------------------------------------------------- @08A
GRPSRCH  SAM24                         SWITCH TO 24 BIT ADDRESSING @08A
PROCSRCH CLI   0(R3),X'FF'                                         @08A
         JE    NEXTENTR                SKIP IF INACTIVE ENTRY      @08A
         MVC   SRCHDDN,0(R3)           GET DDNAME                  @08A
         BRAS  R14,SRCTMPRC            LOCATE THE MEMBER           @08A
         LTR   R15,R15                 RC = 0 ?                    @08A
         JNZ   NEXTENTR                BRANCH IF MEMBER FIND       @08A
         MVC   LIBTYPE(8),8(R3)        GET DDNAME TYPE             @08A
         J     DISPLAY                 DISPLAY MSG4                @08A
NEXTENTR AHI   R3,16                   BUMP TO NEXT ENTRY          @08A
         CLI   0(R3),C' '              END OF TABLE ?              @08A
         JNE   PROCSRCH                NEXT TABLE ENTRY            @08A
         BR    R7                      RETURN                      @08A
*----------------------------------------------------------------- @08A
* LOCATE MEMBER IN TEMPDD DIRECTORY                                @08A
*----------------------------------------------------------------- @08A
SRCTMPRC BAKR  R14,0               SAVE REGISTERS TO LINKAGE STACK @08A
         MVC   TEMPDD+40(8),SRCHDDN    UPDATE TEMPDD DDNAME        @08A
*----------------------------------------------------------------- @08A
*  LOCATE DDNAME TIOT ENTRY                                        @08A
*----------------------------------------------------------------- @08A
LOCDDN   DS    0H                    EXTRACT DSNAME FROM JFCB      @05A
         L     R1,TIOTADR            GET TIOT ADDRESS              @05A
         AHI   R1,24                 LOCATE THE FIRST TIOT ENTRIES @05A
NEXTIOT  CLC   SRCHDDN,4(R1)         DDNAME FOUND ??               @05A
         JE    DDNFIND               BRANCH IF YES                 @05A
         CLI   0(R1),X'00'           END OF TIOT ??                @05A
         JE    PROC3                 BRANCH IF END OF TIOT         @08A
         AHI   R1,20                 ADD LENGTH OF TIOT ENTRY      @05A
         J     NEXTIOT               NEXT TIOT ENTRY               @05A
DDNFIND  ST    R1,TIOTCUR              SAVE TIOT CURRENT ENTRY     @08A
         OPEN  (TEMPDD,(INPUT))        OPEN TEMPDD                 @08A
         LTR   R15,R15                 RC = 0 ?                    @08A
         JNZ   PROC3                   BRANCH IF OPEN ERROR        @08A
         BLDL  TEMPDD,LIST        LOCATE MEMBER IN TEMPDD LIBRARY  @08A
         LTR   R15,R15                 CHECK RETURN CODE           @08A
         JNZ   PROC2                   NOT FOUND IN TEMPDD LIBRARY @08A
*-----------------------------------------------------------------
*  GET DSNAME FROM TIOT JFCB TOKEN
*------------------------------------------------------------------
         L     R1,TIOTCUR            RESTORE TIOT ENTRY            @08A
         CLI   BLDLK,X'00'           ANY CONCATENATION ?           @05A
         JE    GETDSNM               BRANCH IF NO CONCATENATION    @05A
         SR    R2,R2                 CLEAR FOR IC INSTRUCTION      @08A
         IC    R2,BLDLK              PICK UP CONCATENATION NUMBER  @08A
NEXTIOT2 AHI   R1,20                 BUMP TO NEXT TIOT ENTRY       @05A
         CLI   4(R1),C' '            NEW DDNAME ?                  @05A
         JNE   PROC2                 BRANCH IF NEW DDNAME          @08A
         BRCT  R2,NEXTIOT2           DO UNTIL BLDLK = 0            @05A
GETDSNM  MVC   SW_EPA+4(4),12(R1)    GET JFCB TOKEN                @05A
         L     R4,SWAPAPTR                                         @05A
         USING ZB505,R4           ESTABLISH ADDRESSABILITY TO EPA  @05A
         SAM31                         SWITCH TO 31 BIT ADDRESS    @05A
*  USE SWAREQ TO GET THE SWA WORK AREA ABOUT 16MB LINE (SWA=ABOVE) @05A
         SWAREQ FCODE=RL,EPA=SWAPAPTR,UNAUTH=YES,MF=(E,SWAPARMS)   @05A
         LTR   R15,R15                 RC = 0 ?                    @05A
         JNZ   PROC2                   BRANCH IF RC IS NOT ZERO    @08A
         L     R4,SW_EPA               POINTS TO JFCB              @05A
         MVC   TEMPNAME,0(R4)          JFCBDSNM                    @05A
         SAM24                         SWITCH TO 24 BIT ADDRESSING @05A
         MVC   LIBTYPE(8),SRCHDDN                                  @08A
         MVC   LIBTYPE+9(40),TEMPNAME  JFCBDSNM                    @08A
         XC    PRETCODE,PRETCODE       TURN ON FIND SWITCH         @08A
         CLOSE TEMPDD                                              @08A
         SR    R15,R15                 RC = 0                      @08A
         PR                            RETURN                      @08A
PROC2    CLOSE TEMPDD                                              @08A
PROC3    LA    R15,4                   RC = 4                      @08A
         PR                            RETURN                      @08A
MOVENAME MVC   NAME(0),0(R1)           MOVE NAME FOR LOAD
TEMPDD   DCB   DDNAME=TEMPDD,MACRF=R,DSORG=PO,EODAD=PROC2          @08A
*-------------------------------------------------------------------
LIST     DC    H'1',H'14'              BLDL LIST
BLDLNAME DC    CL8' '                  BLDL NAME OF MODULE
BLDLTTR  DC    XL3'00'                 TTR OF MODULE
BLDLK    DC    X'00'                   CONCATENATION NUMBER
BLDLZ    DC    X'00'                   LOCATION
*                00 PRIVATE LIBRARY
*                01 LINK LIBRARY
*                02 JOB, TASK, OR STEP LIBRARY
*             03-16 JOB, TASK, OR STEP LIBRARY OF PARENT TASK N,
*                                      WHERE N = Z-2
BLDLC    DC    X'00'                   ENTRY TYPE
*-------------------------------------------------------------------
MSG0     DS    0F
         DC    C'REQUESTED MODULE NOT FOUND IN EITHER LPA, '
         DC    C'LINKLIST, STEP/ISPLLIB OR NUCLEUS'
LMSG0    EQU   *-MSG0                SIZE OF MESSAGE
*-------------------------------------------------------------------
MSG1     DS    0F
         DC    C'JPA MODULE '
JPANAME  DC    CL8' '
         DC    C' AT '
JPAADR   DC    CL8' '                JPA ADDRESS
         DC    CL14' IN USE COUNT '
JPAUSE   DC    CL4' '
LMSG1    EQU   *-MSG1                SIZE OF MESSAGE
         DC    C' (ALIAS OF '
JPATRUE  DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS
LMSG1A   EQU   *-MSG1                SIZE OF MESSAGE
*-------------------------------------------------------------------
MSG4     EQU   *
MSG4NAME DC    CL8' '
         DC    C' FOUND AS A '
MODTYPE  DC    C'MAJOR'
         DC    C' NAME IN '
LIBTYPE  DC    CL13' '               STEPLIB/ISPLLIB/DYN LINKLIST  @08C
DSN      DC    CL36' '
LMSG4    EQU   *-MSG4         SIZE OF MESSAGE
*-------------------------------------------------------------------
MSG5     DS    0F
LPATYPE  DC    C'PLPA MODULE '                                     @08C
NAME     DC    CL8' '
         DC    C' IS: '
LENGTH   DC    CL6' '
         DC    C' BYTES AT '
ADDRESS  DC    CL8' '                MVS/XA
LMSG5    EQU   *-MSG5                SIZE OF MESSAGE
         DC    C' (ALIAS OF '
TRUENM   DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS
LMSG5A   EQU   *-MSG5                SIZE OF MESSAGE
*-------------------------------------------------------------------
MSG6     DS    0F                                                  @05A
         DC    CL22'LPA MODULE RESIDES IN '                        @05A
LPADSN   DC    CL44' '                                             @05A
         DC    CL13' '                                             @05A
LMSG6A   EQU   *-MSG6                SIZE OF MESSAGE               @05A
*-------------------------------------------------------------------
*EMSG7   DC    C'NO ALTLIB TABLE. SEARCH RESULT MAY BE INCORRECT'  @05A
*-------------------------------------------------------------------
MSG8     DS    0F
         DC    C'REQUESTED COMMAND NOT FOUND IN EITHER SYSEXEC '
         DC    C'OR SYSPROC'
LMSG8    EQU   *-MSG8                SIZE OF MESSAGE
*-------------------------------------------------------------------
MSG9     DS    0F
         DC    C'NUCLEUS MODULE : '
MSG3NAME DC    CL8' '
         DC    C' EPA '                                            @03C
NADDRESS DC    CL9' '                NUCLEUS MODULE EPA            @03A
         DC    C' LENGTH IN HEX '                                  @03A
NLEN     DC    CL9' '                LENGTH OF THE MODULE          @03A
LMSG9    EQU   *-MSG9                SIZE OF MESSAGE
*-------------------------------------------------------------------
TIOTADR  DS    A                     ADDRESS OF TIOT               @05A
TIOTCUR  DS    A                     ADDRESS OF CURRENT TIOT ENTRY @08A
SWAPAPTR DC    A(SW_EPA)                                           @05A
SW_EPA   DC    XL28'00'                                            @05A
SWAPARMS SWAREQ MF=L,UNAUTH=YES                                    @05A
CSVMLEN   DS   F                LPA MODULE LENGTH                  @08A
CSVEPA    DS   F                LPA MODULE ENTRY POINT ADDRESS     @08A
CSVATTR3  DS   XL1              ATTRIBUTE BYTE 3                   @08A
CLIBDEF   DC   8X'FF'           ISPLLIB LIBDEF DDNAME              @08A
          DC   CL8'LIBDEF  '                                       @08A
CISPLLIB  DC   CL8'ISPLLIB '                                       @08A
          DC   CL8'ISPLLIB '                                       @08A
CTASKDDN  DC   8X'FF'           TASKLIB DDNAME                     @08A
          DC   CL8'TASKLIB'                                        @08A
CSTEPLIB  DC   CL8'STEPLIB '                                       @08A
          DC   CL8'STEPLIB '                                       @08A
          DC   C' '             END OF TABLE                       @08A
CUEXEC    DC   8X'FF'                                              @08A
          DC   CL8'SYSUEXEC'    USER LEVEL EXEC                    @08A
CUPROC    DC   8X'FF'                                              @08A
          DC   CL8'SYSUPROC'    USER LEVEL CLIST                   @08A
CAPLEXEC  DC   8X'FF'                                              @08A
          DC   CL8'APPLEXEC'    APPLICATION LEVEL EXEC             @08A
CAPLEXES  DC   8X'FF'                                              @08A
          DC   CL8'APPSEXEC'    APPLICATION LEVEL STACKED EXEC     @08A
CAPLPROC  DC   8X'FF'                                              @08A
          DC   CL8'APPLPROC'    APPLICATION LEVEL CLIST            @08A
CAPLPROS  DC   8X'FF'                                              @08A
          DC   CL8'APPSPROC'    APPLICATION LEVEL STACKED CLIST    @08A
CSYSEXEC  DC   8X'FF'                                              @08A
          DC   CL8'SYSEXEC '    SYSTEM LEVEL EXEC                  @08A
CSYSPROC  DC   8X'FF'                                              @08A
          DC   CL8'SYSPROC '    SYSTEM LEVEL CLIST                 @08A
          DC   C' '             END OF TABLE                       @08A
CTLD      DC   C'TLD'                                              @08A
CTOS      DC   C'TOS'                                              @08A
CCSA      DC   C'CSA '                                             @08A
UNKNOWN   DC   C'????'                                             @08A
CMINOR    DC   CL5'MINOR'                                          @05A
SRCHDDN   DC   CL8'        '                                       @05A
CFINDCMD  DC   CL8'FINDCMD '                                       @05A
CFINDPRG  DC   CL8'FINDPRG '                                       @05A
CTASKLIB  DC   CL12'TASKLIB     '                                  @08A
CJOBSTEP  DC   CL12'STEPLIB     '                                  @05A
CDYNLNK   DC   CL12'DYNAMIC LINK'                                  @05A
TEMPNAME  DC   CL44' '                                             @05A
VISPLINK  DC   V(ISPLINK)                                          @05A
VISPQRY   DC   V(ISPQRY)                                           @05A
VLPALIB   DC   V(LPALIB)                                           @05A
TRTABLE   DC   C'0123456789ABCDEF' TRANSLATE TABLE
LSTNAME   DC   CL16'CURRENT'  CURRENT LINKLIST SET                 @01A
DBLWD     DC   D'0'           WORKAREA
ECB       DC   F'0'           DUMB ECB FOR PARSE
PRETCODE  DC   F'4'           RETURN CODE (AND MSG SWITCH)
CMDANSR   DC   F'0'           PARSE ANSWER AREA POINTER
CMDUPT    DC   F'0'           USER PROFILE TABLE POINTER
CMDECT    DC   F'0'           ENVIRONMENT CONTROL TABLE
CMDECB    DC   A(ECB)         ECB POINTER
CMDPCL    DC   A(IKJPCL)      ADDRESS OF IKJPARM
CMDANS    DC   A(CMDANSR)     PLACE TO PUT ANSWER
CMDCBUF   DC   F'0'           POINTER TO COMMAND BUFFER
ECBADS    DC   F'0'            SPACE FOR THE EVENT CONTROL BLOCK   @02A
TEXTADS   DC   H'83'           LENGTH OF THE OUTPUT LINE           @02A
          DC   H'0'            RESERVED                            @02A
TEXT      DS   CL79                                                @02A
IOPLADS   DC   4F'0'           SPACE FOR THE INPUT AND OUTPUT PARM @02A
PUTBLOCK  PUTLINE MF=L     LIST FORM OF THE PUTLINE MACRO INST     @02A
          LTORG
          PRINT NOGEN
IKJPCL    IKJPARM
IKJOPT   IKJIDENT 'MODULE NAME',MAXLNTH=8,FIRST=ALPHA,                 X
               OTHER=ALPHANUM,PROMPT='NAME OF MODULE TO LOCATE'
         IKJENDP
         IKJCPPL
         IKJECT                                                    @08A
         IKJTCB
         IHALPDE
         IHACDE
         IHAPSA                                                    @08A
         IKJEFLWA                                                  @08A
         IHAASCB                                                   @08A
         IHAASXB                                                   @08A
         IEFJESCT                                                  @05A
         IEFJFCBN                                                  @05A
         IEFZB505 LOCEPAX=YES                                      @05A
         CVT DSECT=YES,LIST=NO
         YREGS                                                     @04A
         END
